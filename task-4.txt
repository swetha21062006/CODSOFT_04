#include <iostream>
#include <fstream>
#include <string>
#include <cstdlib>

using namespace std;
int ID = 0;

// Custom type todo which has two fields id and task
struct todo {
    int id;
    string task;
};

// Method to add a new task to the list of tasks
void addtodo() {
    system("cls");
    cout << "\t\t\t***********************************************************************" << endl;
    cout << "\t\t\t                       WELCOME TO Your ToDo List                       " << endl;
    cout << "\t\t\t***********************************************************************" << endl << endl << endl;
    
    todo todo;
    cout << "\n\tEnter new task: ";
    cin.ignore();
    getline(cin, todo.task); // Get user input
    ID++; // Increment id for the current task

    // Now write this task to the todo.txt file
    ofstream write;
    write.open("todo.txt", ios::app);
    write << ID << endl;
    write << todo.task << endl;
    write.close();

    // Write the id to a new file so that we can use this id later to add new tasks
    write.open("id.txt");
    write << ID;
    write.close();

    char ch;
    cout << "Do you want to add more tasks? y/n" << endl;
    cin >> ch;

    // If user wants to add a new task again then call the same function else return
    if (ch == 'y') {
        addtodo();
    } else {
        cout << "\n\tTask has been added successfully";
        return;
    }
}

// Method to print the task on the screen
void print(todo s) {
    cout << "\n\tID: " << s.id;
    cout << "\n\tTask: " << s.task;
}

// Method to read data from the todo.txt file and print it on screen
void readData() {
    system("cls");
    cout << "\t\t\t***********************************************************************" << endl;
    cout << "\t\t\t                       WELCOME TO Your ToDo List                       " << endl;
    cout << "\t\t\t***********************************************************************" << endl << endl << endl;
    
    todo todo;
    ifstream read;
    read.open("todo.txt");
    cout << "\n\t------------------Your current Tasks in the list--------------------";
    
    // While we don't reach the end of file keep on printing the data on screen
    while (read >> todo.id) {
        read.ignore();
        getline(read, todo.task);
        print(todo);
    }
    read.close();
}

// Method to search for a specific task from the todo.txt file
int searchData() {
    system("cls");
    cout << "\t\t\t***********************************************************************" << endl;
    cout << "\t\t\t                       WELCOME TO Your ToDo List                       " << endl;
    cout << "\t\t\t***********************************************************************" << endl << endl << endl;
    
    int id;
    cout << "\n\tEnter task id: ";
    cin >> id;
    
    todo todo;
    ifstream read;
    read.open("todo.txt");
    
    // While we don't reach end of file keep on searching for the id to match to the user input id
    while (read >> todo.id) {
        read.ignore();
        getline(read, todo.task);
        if (todo.id == id) {
            print(todo);
            return id;
        }
    }
    read.close();
    return -1; // Return -1 if not found
}

// Method to delete the task from the todo.txt file
void deleteData() {
    system("cls");
    cout << "\t\t\t***********************************************************************" << endl;
    cout << "\t\t\t                       WELCOME TO Your ToDo List                       " << endl;
    cout << "\t\t\t***********************************************************************" << endl << endl << endl;
    
    int id = searchData();
    if (id == -1) {
        cout << "\n\tTask not found";
        return;
    }
    
    cout << "\n\tDo you want to delete this task (y/n): ";
    char choice;
    cin >> choice;
    
    if (choice == 'y') {
        todo todo;
        ofstream tempFile;
        tempFile.open("temp.txt");
        ifstream read;
        read.open("todo.txt");
        
        // While we don't reach the end of file keep on searching for the id to delete the task
        while (read >> todo.id) {
            read.ignore();
            getline(read, todo.task);
            if (todo.id != id) {
                tempFile << todo.id << endl;
                tempFile << todo.task << endl;
            }
        }
        read.close();
        tempFile.close();
        remove("todo.txt");
        rename("temp.txt", "todo.txt");
        cout << "\n\tTask deleted successfully";
    } else {
        cout << "\n\tRecord not deleted";
    }
}

// Method to update the task
// Here we create a new temp.txt file and add all the updated data to this file
// Once updated we then delete the original todo.txt and then rename this file to todo.txt
void updateData() {
    system("cls");
    cout << "\t\t\t***********************************************************************" << endl;
    cout << "\t\t\t                       WELCOME TO Your ToDo List                       " << endl;
    cout << "\t\t\t***********************************************************************" << endl << endl << endl;
    
    int id = searchData();
    if (id == -1) {
        cout << "\n\tTask not found";
        return;
    }
    
    cout << "\n\tDo you want to update this task (y/n): ";
    char choice;
    cin >> choice;
    
    if (choice == 'y') {
        todo newData;
        cout << "\n\tEnter todo task: ";
        cin.ignore();
        getline(cin, newData.task);
        
        todo todo;
        ofstream tempFile;
        tempFile.open("temp.txt");
        ifstream read;
        read.open("todo.txt");
        
        // While we don't reach end of file keep on searching for the id and once found update with new data
        while (read >> todo.id) {
            read.ignore();
            getline(read, todo.task);
            if (todo.id != id) {
                tempFile << todo.id << endl;
                tempFile << todo.task << endl;
            } else {
                tempFile << todo.id << endl;
                tempFile << newData.task << endl;
            }
        }
        read.close();
        tempFile.close();
        remove("todo.txt");
        rename("temp.txt", "todo.txt");
        cout << "\n\tTask updated successfully";
    } else {
        cout << "\n\tRecord not updated";
    }
}

int main() {
    system("cls");
    system("Color E0"); // "Color XY", X - background color, Y - text color
    system("title todoapp @copyassignment");
    cout << "\t\t\t***********************************************************************" << endl;
    cout << "\t\t\t*                                                                     *" << endl;
    cout << "\t\t\t*                      WELCOME TO Your ToDo List                      *" << endl;
    cout << "\t\t\t*                                                                     *" << endl;
    cout << "\t\t\t***********************************************************************" << endl << endl << endl << endl;
    
    ifstream read;
    read.open("id.txt");
    if (!read.fail()) {
        read >> ID;
    } else {
        ID = 0;
    }
    read.close();

    while (true) {
        cout << endl << endl;
        cout << "\n\t1. Add task";
        cout << "\n\t2. View tasks";
        cout << "\n\t3. Search task";
        cout << "\n\t4. Delete task";
        cout << "\n\t5. Update task";
        cout << "\n\t6. Exit";

        int choice;
        cout << "\n\tEnter choice: ";
        cin >> choice;
        switch (choice) {
        case 1:
            addtodo();
            break;
        case 2:
            readData();
            break;
        case 3:
            searchData();
            break;
        case 4:
            deleteData();
            break;
        case 5:
            updateData();
            break;
        case 6:
            cout << "\n\tExiting...";
            exit(0);
        default:
            cout << "\n\tInvalid choice. Please try again.";
        }
    }
}
